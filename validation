        // Reset error messages
        $('.woocommerce-invalid').removeClass('woocommerce-invalid');

        // Get input field values
        var name = $('#billing_first_name').val().trim();
        var email = $('#billing_email').val().trim();
        var phone = $('#billing_phone').val().trim();

        // Check for empty fields
        if (name == '') {
            $('#billing_first_name').addClass('woocommerce-invalid');
        }

jQuery(document).ready(function($) {
  // Add validation for name field
  $('#billing_first_name, #billing_last_name').on('input', function() {
    var name = $(this).val();
    if (name.length < 3) {
      $(this).addClass('invalid');
      $(this).after('<p class="error">Please enter a valid name</p>');
      $('html, body').animate({
        scrollTop: $(".invalid").offset().top - 100
      }, 500);
    } else {
      $(this).removeClass('invalid');
      $('.error').remove();
    }
  });

  // Add validation for email field
  $('#billing_email').on('input', function() {
    var email = $(this).val();
    var emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) {
      $(this).addClass('invalid');
      $(this).after('<p class="error">Please enter a valid email address</p>');
      $('html, body').animate({
        scrollTop: $(".invalid").offset().top - 100
      }, 500);
    } else {
      $(this).removeClass('invalid');
      $('.error').remove();
    }
  });

  // Add validation for phone field
  $('#billing_phone').on('input', function() {
    var phone = $(this).val();
    var phoneRegex = /^[0-9]{10}$/;
    if (!phoneRegex.test(phone)) {
      $(this).addClass('invalid');
      $(this).after('<p class="error">Please enter a valid phone number</p>');
      $('html, body').animate({
        scrollTop: $(".invalid").offset().top - 100
      }, 500);
    } else {
      $(this).removeClass('invalid');
      $('.error').remove();
    }
  });
});



//serverside
<?php
add_action('woocommerce_checkout_process', 'validate_checkout_fields');
function validate_checkout_fields() {
  if (empty($_POST['billing_first_name']) || empty($_POST['billing_last_name']) || empty($_POST['billing_email']) || empty($_POST['billing_phone'])) {
    wc_add_notice(__('Please fill in all required fields.'), 'error');
  }

  if (!is_email($_POST['billing_email'])) {
    wc_add_notice(__('Please enter a valid email address.'), 'error');
  }

  if (!preg_match('/^\d{10}$/', $_POST['billing_phone'])) {
    wc_add_notice(__('Please enter a valid phone number.'), 'error');
  }

  if ( empty( $_POST['billing_last_name'] ) || strlen( $_POST['billing_last_name'] ) < 3 ) {
        wc_add_notice(__('Please enter a valid last_name.'), 'error');
    }
  if ( empty( $_POST['billing_last_name'] ) || !preg_match('/^[a-zA-Z]+$/', $_POST['billing_last_name']) ) {
        wc_add_notice( sprintf( $error_message, __('last name', 'woocommerce') ), 'error' );
    }

}


$order = wc_get_order( $order_id );

foreach ( $order->get_items() as $item_id => $item ) {
    echo '<p>Product name: ' . $item->get_name() . '</p>';

    $product = $item->get_product();
    $quantity = $item->get_quantity();

    // Loop through product quantities and display
    for ( $i = 1; $i <= $quantity; $i++ ) {
        // Get the formatted meta data for this quantity of the item
        $formatted_meta = $item->get_formatted_meta_data( '', $i );

        // Loop through the meta data and display it
        foreach ( $formatted_meta as $meta ) {
            echo '<p>' . $meta->display_key . ': ' . $meta->display_value . '</p>';
        }
    }
}

